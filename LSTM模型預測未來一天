#過去30天預測未來1天，共預測30天


#------------------------------------------------------------------------------------------------------------------------------------------------------
#----------建 LSTM模型----------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
import math 
import matplotlib.pyplot as plt 
import keras 
import pandas as pd 
import numpy as np 
from keras.models import Sequential 
from keras.layers import Dense 
from keras.layers import LSTM 
from keras.layers import Dropout 
from keras.layers import * 
from sklearn .preprocessing import MinMaxScaler 
from sklearn.metrics import mean_squared_error 
from sklearn.metrics import mean_absolute_error 
from sklearn.model_selection import train_test_split 
from keras.callbacks import EarlyStopping

#----------放入篩選後之變數-----------------------------------------------------------
df2 = data[['date', 'Trading_Volume','close','spread']]
#only close
training_set = df2.iloc[:7197, 2:3].values 
test_set = df2.iloc[7197:, 2:3].values


#----------特徵縮放-------------------------------------------------------------------
sc = MinMaxScaler(feature_range = (0, 1)) 
training_set_scaled = sc.fit_transform(training_set)

#----------創建一個具有 30 個時間步長和 1 個輸出的數據結構-------------------------------
np.random.seed(10)
X_train = [] 
y_train = [] 
for i in range(30, 7197): 
    X_train.append(training_set_scaled[i-30:i, 0]) 
    y_train.append( training_set_scaled[i, 0]) 
X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1)) #values、#time-steps、#1 維輸出

model = Sequential()
#----------Bidirectional可加可不加，若要加，不一定每層都要加
#----------添加第一個 LSTM 層和一些 Dropout 正則化  Bidirectional-----------------------------------------------------------------
model.add(Bidirectional(LSTM(units = 100, return_sequences = True, input_shape = (X_train.shape[1], 1))))
#model.add(Dropout(0.2)) 
#return_sequences = True 適用於兩層以上

#----------添加第二個 LSTM 層和一些 Dropout 正則化--------------------------------------------------------------------------------
model.add(Bidirectional(LSTM(units = 100, return_sequences = True)))
#model.add(Dropout(0.2))

#----------添加第三個 LSTM 層和一些 Dropout 正則化--------------------------------------------------------------------------------
model.add(Bidirectional(LSTM(units = 100, return_sequences = True))) 
#model.add(Dropout(0.2))

#----------添加第四個 LSTM 層和一些 Dropout 正則化--------------------------------------------------------------------------------
model.add(Bidirectional(LSTM(units = 100, return_sequences = False)))
#model.add(Dropout(0.2))

#----------添加輸出層------------------------------------------------------------------------------------------------------------
model.add(Dense(units = 1))

#----------編譯RNN--------------------------------------------------------------------------------------------------------------- 
model.compile(optimizer = 'adam', loss = 'mean_squared_error')

#----------將 RNN 擬合到訓練集----------------------------------------------------------------------------------------------------
model.fit(X_train, y_train, epochs = 100, batch_size = 128)

#----------求model mse--------------------------
#model.summary()


dataset_train = df2.iloc[:7197, 2:3] 
dataset_test = df2.iloc[7197:, 2:3]
dataset_total = pd.concat((dataset_train, dataset_test), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 30:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(30, 60):
    X_test.append(inputs[i-30:i+1, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
print(X_test.shape)

#----------使用測試集進行預測------------------------------------------------------------------------------------------------------
predicted_close = model.predict(X_test) 
predicted_close = sc.inverse_transform(predicted_close)

#----------可視化結果--------------------------------------------------------------------------------------------------------------
plt.plot(df2.loc[7197:, 'date'],dataset_test.values, color = 'red', label = 'Real open') 
plt.plot(df2.loc[7197:, 'date'],predicted_close, color = 'blue', label = 'Predicted open') 
#plt.plot(dataset_test.values, color = 'red', label = 'Real close') 
#plt.plot(predicted_close, color = 'blue', label = 'Predicted close') 
plt.title('Close Prediction--4(two-way)') 
plt.xlabel('date')
plt.xticks(rotation=60)
plt.ylabel('close')
plt.legend() 
plt.show()

mse = np.round(mean_squared_error(dataset_test['close'].values, predicted_close), 3)
print(mse)

from keras.utils.vis_utils import plot_model
from importlib import reload
reload(keras.utils.vis_utils)
#import pydot
#import graphviz
#import pydotplus
plot_model(model, to_file="close_4_twoway.png",show_shapes=True);

#import os
#os.environ["PATH"] += os.pathsep + 'C:/Program Files/Graphviz/bin/'
#os.environ["PATH"] += os.pathsep + 'C:\graphviz-2.44.1-win32/Graphviz/bin/'
